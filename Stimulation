/*
Implement the multi-level feedback queue scheduling algorithm . 
You can use the code of others to implement Roud-Robin, and FCFS but implement aging by your own self.
First queue::TQ=8,Second queue::TQ=16,Third queue::FCFS
*/
#include<stdio.h>

struct process
{
    char name;
    int AT,BT,WT,TAT,RT,CT;
}Q1[10],Q2[10],Q3[10];/*Three queues*/

int n;
void sortByArrival()
{
struct process temp;
int i,j;
for(i=0;i<n;i++)
    {
        for(j=i+1;j<n;j++)
            {
                if(Q1[i].AT>Q1[j].AT)
                    {
                          temp=Q1[i];
                          Q1[i]=Q1[j];
                          Q1[j]=temp;
                    }
            }
    }
}

int main()
{
     int i,j,k=0,r=0,time=0,tq1=8,tq2=16,flag=0;
     char c;
     printf("Enter no of processes:");
     scanf("%d",&n);
     for(i=0,c='A';i<n;i++,c++)
     {
         Q1[i].name=c;
         printf("\nEnter the arrival time and burst time of process %c: ",Q1[i].name);
         scanf("%d%d",&Q1[i].AT,&Q1[i].BT);
         Q1[i].RT=Q1[i].BT;/*save burst time in remaining time for each process*/

    }
sortByArrival();
time=Q1[0].AT;
printf("Process in first queue following RR with qt=8");
printf("\nProcess\t\tRT\t\tWT\t\tTAT\t\t");
for(i=0;i<n;i++)
{

  if(Q1[i].RT<=tq1)
  {

       time+=Q1[i].RT;/*from arrival time of first process to completion of this process*/
       Q1[i].RT=0;
       Q1[i].WT=time-Q1[i].AT-Q1[i].BT;/*amount of time process has been waiting in the first queue*/
       Q1[i].TAT=time-Q1[i].AT;/*amount of time to execute the process*/
       printf("\n%c\t\t%d\t\t%d\t\t%d",Q1[i].name,Q1[i].BT,Q1[i].WT,Q1[i].TAT);

  }
  else/*process moves to queue 2 with qt=16*/
  {
      Q2[k].WT=time;
      time+=tq1;
      Q1[i].RT-=tq1;
      Q2[k].BT=Q1[i].RT;
      Q2[k].RT=Q2[k].BT;
      Q2[k].name=Q1[i].name;
      k=k+1;
      flag=1;
   }
}
if(flag==1)
 {printf("\nProcess in second queue following RR with qt=16");
  printf("\nProcess\t\tRT\t\tWT\t\tTAT\t\t");
}for(i=0;i<k;i++)
   {
    if(Q2[i].RT<=tq2)
     {
       time+=Q2[i].RT;/*from arrival time of first process +BT of this process*/
       Q2[i].RT=0;
       Q2[i].WT=time-tq1-Q2[i].BT;/*amount of time process has been waiting in the ready queue*/
       Q2[i].TAT=time-Q2[i].AT;/*amount of time to execute the process*/
       printf("\n%c\t\t%d\t\t%d\t\t%d",Q2[i].name,Q2[i].BT,Q2[i].WT,Q2[i].TAT);

    }
    else/*process moves to queue 3 with FCFS*/
    {
      Q3[r].AT=time;
      time+=tq2;
      Q2[i].RT-=tq2;
      Q3[r].BT=Q2[i].RT;
      Q3[r].RT=Q3[r].BT;
      Q3[r].name=Q2[i].name;
      r=r+1;
      flag=2;
    }
  }

{if(flag==2)
printf("\nProcess in third queue following FCFS ");
}
for(i=0;i<r;i++)
{
    if(i==0)
            Q3[i].CT=Q3[i].BT+time-tq1-tq2;
        else
            Q3[i].CT=Q3[i-1].CT+Q3[i].BT;

}

for(i=0;i<r;i++)
    {
        Q3[i].TAT=Q3[i].CT;
        Q3[i].WT=Q3[i].TAT-Q3[i].BT;
        printf("\n%c\t\t%d\t\t%d\t\t%d\t\t",Q3[i].name,Q3[i].BT,Q3[i].WT,Q3[i].TAT);

    }

}
========================================================================================================================================
/*
CPU schedules N processes which arrive at different time intervals and each process is allocated the CPU for a specific user input time unit,
processes are scheduled using a preemptive round robin scheduling algorithm. Each process must be assigned a numerical priority, 
with a higher number indicating a higher relative priority. In addition to the processes one task has priority 0. The length of a time quantum is T units,
where T is the custom time considered as time quantum for processing. If a process is preempted by a higher-priority process, 
the preempted process is placed at the end of the queue. Design a scheduler so that the task with priority 0 does not starve for resources and 
gets the CPU at some time unit to execute. Also compute waiting time, turn around.
*/

#include<stdio.h>

int main()
{
	int ts,pid[10],need[10],wt[10],tat[10],i,j,n,n1;
	int bt[10],flag[10],ttat=0,twt=0;
	float awt,atat;
	printf("\t\t ROUND ROBIN SCHEDULING \n");
	printf("Enter the number of Processors \n");
	scanf("%d",&n);
	n1=n;
	printf("\n Enter the Timeslice \n");
	scanf("%d",&ts);
	
	for(i=1;i<=n;i++)
		{
 			printf("\n Enter the priority for process %d\t",i);
 			scanf("%d",&pid[i]);
 			printf("\n Enter the Burst Time for the process\t");
 			scanf("%d",&bt[i]);
 			need[i]=bt[i];
		}
	for(i=1;i<=n;i++)
		{
 			flag[i]=1;
 			wt[i]=0;
		}
	while(n!=0)
		{
 			for(i=1;i<=n;i++)
 				{
 					if(need[i]>=ts)
 						{
 							for(j=1;j<=n;j++)
 								{
 									if((i!=j)&&(flag[i]==1)&&(need[j]!=0))
 									wt[j]+=ts;
 								}
							need[i]-=ts;
 							if(need[i]==0)
 								{
									flag[i]=0;
									n--;
 								}
 						}
 					else
 						{
 							for(j=1;j<=n;j++)
 								{
 									if((i!=j)&&(flag[i]==1)&&(need[j]!=0))
									wt[j]+=need[i];
 								}
 							need[i]=0;
 							n--;
 							flag[i]=0;
 						}
				}
		}
	for(i=1;i<=n1;i++)
		{
 			tat[i]=wt[i]+bt[i];
 			twt=twt+wt[i];
 			ttat=ttat+tat[i];
		}
	awt=(float)twt/n1;
	atat=(float)ttat/n1;
	printf("\n\n ROUND ROBIN SCHEDULING ALGORITHM \n\n");
	printf("\n\n Process \t Priority \t BurstTime \t Waiting Time \t, TurnaroundTime \n ");
	for(i=1;i<=n1;i++)
		{
 			printf("\n %5d \t %5d \t\t %5d \t\t %5d \t\t %5d \n",i,pid[i],bt[i],wt[i],tat[i]);
		}
	printf("\n The average Waiting Time=%f",awt);
	printf("\n The average Turnaround Time=%f",atat);
} 



